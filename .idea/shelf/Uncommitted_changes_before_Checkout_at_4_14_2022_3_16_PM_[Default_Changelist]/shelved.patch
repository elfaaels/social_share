Index: lib/social_share.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'dart:async';\r\nimport 'dart:io';\r\nimport 'dart:typed_data';\r\nimport 'package:flutter/services.dart';\r\nimport 'package:path_provider/path_provider.dart';\r\n\r\nclass SocialShare {\r\n  static const MethodChannel _channel = const MethodChannel('social_share');\r\n\r\n  static Future<String> shareInstagramStory(\r\n    String imagePath, {\r\n    String backgroundTopColor,\r\n    String backgroundBottomColor,\r\n    String attributionURL,\r\n    String backgroundImagePath,\r\n  }) async {\r\n    Map<String, dynamic> args;\r\n    if (Platform.isIOS) {\r\n      args = <String, dynamic>{\r\n        \"stickerImage\": imagePath,\r\n        \"backgroundImage\": backgroundImagePath,\r\n        \"backgroundTopColor\": backgroundTopColor,\r\n        \"backgroundBottomColor\": backgroundBottomColor,\r\n        \"attributionURL\": attributionURL\r\n      };\r\n    } else {\r\n      final tempDir = await getTemporaryDirectory();\r\n\r\n      File file = File(imagePath);\r\n      Uint8List bytes = file.readAsBytesSync();\r\n      var stickerData = bytes.buffer.asUint8List();\r\n      String stickerAssetName = 'stickerAsset.png';\r\n      final Uint8List stickerAssetAsList = stickerData;\r\n      final stickerAssetPath = '${tempDir.path}/$stickerAssetName';\r\n      file = await File(stickerAssetPath).create();\r\n      file.writeAsBytesSync(stickerAssetAsList);\r\n\r\n      String backgroundAssetName;\r\n      if (backgroundImagePath != null) {\r\n        File backgroundImage = File(backgroundImagePath);\r\n        Uint8List backgroundImageData = backgroundImage.readAsBytesSync();\r\n        backgroundAssetName = 'backgroundAsset.jpg';\r\n        final Uint8List backgroundAssetAsList = backgroundImageData;\r\n        final backgroundAssetPath = '${tempDir.path}/$backgroundAssetName';\r\n        File backFile = await File(backgroundAssetPath).create();\r\n        backFile.writeAsBytesSync(backgroundAssetAsList);\r\n      }\r\n\r\n      args = <String, dynamic>{\r\n        \"stickerImage\": stickerAssetName,\r\n        \"backgroundImage\": backgroundAssetName,\r\n        \"backgroundTopColor\": backgroundTopColor,\r\n        \"backgroundBottomColor\": backgroundBottomColor,\r\n        \"attributionURL\": attributionURL,\r\n      };\r\n    }\r\n    final String response = await _channel.invokeMethod(\r\n      'shareInstagramStory',\r\n      args,\r\n    );\r\n    return response;\r\n  }\r\n\r\n  static Future<String> shareFacebookStory(\r\n      String imagePath,\r\n      String backgroundTopColor,\r\n      String backgroundBottomColor,\r\n      String attributionURL,\r\n      {String appId}) async {\r\n    Map<String, dynamic> args;\r\n    if (Platform.isIOS) {\r\n      args = <String, dynamic>{\r\n        \"stickerImage\": imagePath,\r\n        \"backgroundTopColor\": backgroundTopColor,\r\n        \"backgroundBottomColor\": backgroundBottomColor,\r\n        \"attributionURL\": attributionURL,\r\n      };\r\n    } else {\r\n      File file = File(imagePath);\r\n      Uint8List bytes = file.readAsBytesSync();\r\n      var stickerdata = bytes.buffer.asUint8List();\r\n      final tempDir = await getTemporaryDirectory();\r\n      String stickerAssetName = 'stickerAsset.png';\r\n      final Uint8List stickerAssetAsList = stickerdata;\r\n      final stickerAssetPath = '${tempDir.path}/$stickerAssetName';\r\n      file = await File(stickerAssetPath).create();\r\n      file.writeAsBytesSync(stickerAssetAsList);\r\n      args = <String, dynamic>{\r\n        \"stickerImage\": stickerAssetName,\r\n        \"backgroundTopColor\": backgroundTopColor,\r\n        \"backgroundBottomColor\": backgroundBottomColor,\r\n        \"attributionURL\": attributionURL,\r\n        \"appId\": appId\r\n      };\r\n    }\r\n    final String response =\r\n        await _channel.invokeMethod('shareFacebookStory', args);\r\n    return response;\r\n  }\r\n\r\n  static Future<String> shareTwitter(String captionText,\r\n      {List<String> hashtags, String url, String trailingText}) async {\r\n    Map<String, dynamic> args;\r\n    String modifiedUrl;\r\n    if (Platform.isAndroid) {\r\n      modifiedUrl = Uri.parse(url).toString().replaceAll('#', \"%23\");\r\n    } else {\r\n      modifiedUrl = Uri.parse(url).toString();\r\n    }\r\n    if (hashtags != null && hashtags.isNotEmpty) {\r\n      String tags = \"\";\r\n      hashtags.forEach((f) {\r\n        tags += (\"%23\" + f.toString() + \" \").toString();\r\n      });\r\n      args = <String, dynamic>{\r\n        \"captionText\": captionText + \"\\n\" + tags.toString(),\r\n        \"url\": modifiedUrl,\r\n        \"trailingText\":\r\n            (trailingText == null || trailingText.isEmpty) ? \"\" : trailingText\r\n      };\r\n    } else {\r\n      args = <String, dynamic>{\r\n        \"captionText\": captionText + \" \",\r\n        \"url\": modifiedUrl,\r\n        \"trailingText\":\r\n            (trailingText == null || trailingText.isEmpty) ? \"\" : trailingText\r\n      };\r\n    }\r\n    final String version = await _channel.invokeMethod('shareTwitter', args);\r\n    return version;\r\n  }\r\n\r\n  static Future<String> shareSms(String message,\r\n      {String url, String trailingText}) async {\r\n    Map<String, dynamic> args;\r\n    if (Platform.isIOS) {\r\n      if (url == null) {\r\n        args = <String, dynamic>{\r\n          \"message\": message,\r\n        };\r\n      } else {\r\n        args = <String, dynamic>{\r\n          \"message\": message + \" \",\r\n          \"urlLink\": Uri.parse(url).toString(),\r\n          \"trailingText\": trailingText\r\n        };\r\n      }\r\n    } else if (Platform.isAndroid) {\r\n      args = <String, dynamic>{\r\n        \"message\": message + url + trailingText,\r\n      };\r\n    }\r\n    final String version = await _channel.invokeMethod('shareSms', args);\r\n    return version;\r\n  }\r\n\r\n  static Future<bool> copyToClipboard(content) async {\r\n    final Map<String, String> args = <String, String>{\r\n      \"content\": content.toString()\r\n    };\r\n    final bool response = await _channel.invokeMethod('copyToClipboard', args);\r\n    return response;\r\n  }\r\n\r\n  static Future<bool> shareOptions(String contentText,\r\n      {String imagePath}) async {\r\n    Map<String, dynamic> args;\r\n    if (Platform.isIOS) {\r\n      args = <String, dynamic>{\"image\": imagePath, \"content\": contentText};\r\n    } else {\r\n      if (imagePath != null) {\r\n        File file = File(imagePath);\r\n        Uint8List bytes = file.readAsBytesSync();\r\n        var imagedata = bytes.buffer.asUint8List();\r\n        final tempDir = await getTemporaryDirectory();\r\n        String imageName = 'stickerAsset.png';\r\n        final Uint8List imageAsList = imagedata;\r\n        final imageDataPath = '${tempDir.path}/$imageName';\r\n        file = await File(imageDataPath).create();\r\n        file.writeAsBytesSync(imageAsList);\r\n        args = <String, dynamic>{\"image\": imageName, \"content\": contentText};\r\n      } else {\r\n        args = <String, dynamic>{\"image\": imagePath, \"content\": contentText};\r\n      }\r\n    }\r\n    final bool version = await _channel.invokeMethod('shareOptions', args);\r\n    return version;\r\n  }\r\n\r\n  static Future<String> shareWhatsapp(String content) async {\r\n    final Map<String, dynamic> args = <String, dynamic>{\"content\": content};\r\n    final String version = await _channel.invokeMethod('shareWhatsapp', args);\r\n    return version;\r\n  }\r\n\r\n  static Future<Map> checkInstalledAppsForShare() async {\r\n    final Map apps = await _channel.invokeMethod('checkInstalledApps');\r\n    return apps;\r\n  }\r\n\r\n  static Future<String> shareTelegram(String content) async {\r\n    final Map<String, dynamic> args = <String, dynamic>{\"content\": content};\r\n    final String version = await _channel.invokeMethod('shareTelegram', args);\r\n    return version;\r\n  }\r\n\r\n  static Future<String> shareTikTok(String contentText,\r\n      {String imagePath}) async {\r\n    Map<String, dynamic> args;\r\n    if (Platform.isIOS) {\r\n      args = <String, dynamic>{\"image\": imagePath, \"content\": contentText};\r\n    } else {\r\n      if (imagePath != null) {\r\n        File file = File(imagePath);\r\n        Uint8List bytes = file.readAsBytesSync();\r\n        var imagedata = bytes.buffer.asUint8List();\r\n        final tempDir = await getTemporaryDirectory();\r\n        String imageName = 'stickerAsset.png';\r\n        final Uint8List imageAsList = imagedata;\r\n        final imageDataPath = '${tempDir.path}/$imageName';\r\n        file = await File(imageDataPath).create();\r\n        file.writeAsBytesSync(imageAsList);\r\n        args = <String, dynamic>{\"image\": imageName, \"content\": contentText};\r\n      } else {\r\n        args = <String, dynamic>{\"image\": imagePath, \"content\": contentText};\r\n      }\r\n    }\r\n    final String version = await _channel.invokeMethod('shareTikTok', args);\r\n    return version;\r\n  }\r\n\r\n  static Future<String> shareLinkedin(String contentText,\r\n      {String imagePath}) async {\r\n    Map<String, dynamic> args;\r\n    if (Platform.isIOS) {\r\n      args = <String, dynamic>{\"image\": imagePath, \"content\": contentText};\r\n    } else {\r\n      if (imagePath != null) {\r\n        File file = File(imagePath);\r\n        Uint8List bytes = file.readAsBytesSync();\r\n        var imagedata = bytes.buffer.asUint8List();\r\n        final tempDir = await getTemporaryDirectory();\r\n        String imageName = 'stickerAsset.png';\r\n        final Uint8List imageAsList = imagedata;\r\n        final imageDataPath = '${tempDir.path}/$imageName';\r\n        file = await File(imageDataPath).create();\r\n        file.writeAsBytesSync(imageAsList);\r\n        args = <String, dynamic>{\"image\": imageName, \"content\": contentText};\r\n      } else {\r\n        args = <String, dynamic>{\"image\": imagePath, \"content\": contentText};\r\n      }\r\n    }\r\n    final String version = await _channel.invokeMethod('shareLinkedin', args);\r\n    return version;\r\n  }\r\n\r\n// static Future<String> shareSlack() async {\r\n//   final String version = await _channel.invokeMethod('shareSlack');\r\n//   return version;\r\n// }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/social_share.dart b/lib/social_share.dart
--- a/lib/social_share.dart	(revision 03e823dd877da6a68b6f21f23a594f3fcd67f694)
+++ b/lib/social_share.dart	(date 1649916575172)
@@ -1,28 +1,38 @@
 import 'dart:async';
 import 'dart:io';
 import 'dart:typed_data';
+
 import 'package:flutter/services.dart';
 import 'package:path_provider/path_provider.dart';
 
 class SocialShare {
   static const MethodChannel _channel = const MethodChannel('social_share');
 
-  static Future<String> shareInstagramStory(
-    String imagePath, {
-    String backgroundTopColor,
-    String backgroundBottomColor,
-    String attributionURL,
-    String backgroundImagePath,
-  }) async {
+  static Future<String?> shareInstagramStory(
+      String imagePath, {
+        String? backgroundTopColor,
+        String? backgroundBottomColor,
+        String? attributionURL,
+        String? backgroundImagePath,
+      }) async {
     Map<String, dynamic> args;
     if (Platform.isIOS) {
-      args = <String, dynamic>{
-        "stickerImage": imagePath,
-        "backgroundImage": backgroundImagePath,
-        "backgroundTopColor": backgroundTopColor,
-        "backgroundBottomColor": backgroundBottomColor,
-        "attributionURL": attributionURL
-      };
+      if (backgroundImagePath == null) {
+        args = <String, dynamic>{
+          "stickerImage": imagePath,
+          "backgroundTopColor": backgroundTopColor,
+          "backgroundBottomColor": backgroundBottomColor,
+          "attributionURL": attributionURL
+        };
+      } else {
+        args = <String, dynamic>{
+          "stickerImage": imagePath,
+          "backgroundImage": backgroundImagePath,
+          "backgroundTopColor": backgroundTopColor,
+          "backgroundBottomColor": backgroundBottomColor,
+          "attributionURL": attributionURL
+        };
+      }
     } else {
       final tempDir = await getTemporaryDirectory();
 
@@ -35,7 +45,7 @@
       file = await File(stickerAssetPath).create();
       file.writeAsBytesSync(stickerAssetAsList);
 
-      String backgroundAssetName;
+      String? backgroundAssetName;
       if (backgroundImagePath != null) {
         File backgroundImage = File(backgroundImagePath);
         Uint8List backgroundImageData = backgroundImage.readAsBytesSync();
@@ -54,19 +64,19 @@
         "attributionURL": attributionURL,
       };
     }
-    final String response = await _channel.invokeMethod(
+    final String? response = await _channel.invokeMethod(
       'shareInstagramStory',
       args,
     );
     return response;
   }
 
-  static Future<String> shareFacebookStory(
+  static Future<String?> shareFacebookStory(
       String imagePath,
       String backgroundTopColor,
       String backgroundBottomColor,
       String attributionURL,
-      {String appId}) async {
+      {String? appId}) async {
     Map<String, dynamic> args;
     if (Platform.isIOS) {
       args = <String, dynamic>{
@@ -93,19 +103,19 @@
         "appId": appId
       };
     }
-    final String response =
-        await _channel.invokeMethod('shareFacebookStory', args);
+    final String? response =
+    await _channel.invokeMethod('shareFacebookStory', args);
     return response;
   }
 
-  static Future<String> shareTwitter(String captionText,
-      {List<String> hashtags, String url, String trailingText}) async {
+  static Future<String?> shareTwitter(String captionText,
+      {List<String>? hashtags, String? url, String? trailingText}) async {
     Map<String, dynamic> args;
     String modifiedUrl;
     if (Platform.isAndroid) {
-      modifiedUrl = Uri.parse(url).toString().replaceAll('#', "%23");
+      modifiedUrl = Uri.parse(url ?? '').toString().replaceAll('#', "%23");
     } else {
-      modifiedUrl = Uri.parse(url).toString();
+      modifiedUrl = Uri.parse(url ?? '').toString();
     }
     if (hashtags != null && hashtags.isNotEmpty) {
       String tags = "";
@@ -115,24 +125,22 @@
       args = <String, dynamic>{
         "captionText": captionText + "\n" + tags.toString(),
         "url": modifiedUrl,
-        "trailingText":
-            (trailingText == null || trailingText.isEmpty) ? "" : trailingText
+        "trailingText": trailingText ?? ''
       };
     } else {
       args = <String, dynamic>{
         "captionText": captionText + " ",
         "url": modifiedUrl,
-        "trailingText":
-            (trailingText == null || trailingText.isEmpty) ? "" : trailingText
+        "trailingText": trailingText ?? ''
       };
     }
-    final String version = await _channel.invokeMethod('shareTwitter', args);
+    final String? version = await _channel.invokeMethod('shareTwitter', args);
     return version;
   }
 
-  static Future<String> shareSms(String message,
-      {String url, String trailingText}) async {
-    Map<String, dynamic> args;
+  static Future<String?> shareSms(String message,
+      {String? url, String? trailingText}) async {
+    Map<String, dynamic>? args;
     if (Platform.isIOS) {
       if (url == null) {
         args = <String, dynamic>{
@@ -147,23 +155,23 @@
       }
     } else if (Platform.isAndroid) {
       args = <String, dynamic>{
-        "message": message + url + trailingText,
+        "message": message + (url ?? '') + (trailingText ?? ''),
       };
     }
-    final String version = await _channel.invokeMethod('shareSms', args);
+    final String? version = await _channel.invokeMethod('shareSms', args);
     return version;
   }
 
-  static Future<bool> copyToClipboard(content) async {
+  static Future<bool?> copyToClipboard(content) async {
     final Map<String, String> args = <String, String>{
       "content": content.toString()
     };
-    final bool response = await _channel.invokeMethod('copyToClipboard', args);
+    final bool? response = await _channel.invokeMethod('copyToClipboard', args);
     return response;
   }
 
-  static Future<bool> shareOptions(String contentText,
-      {String imagePath}) async {
+  static Future<bool?> shareOptions(String contentText,
+      {String? imagePath}) async {
     Map<String, dynamic> args;
     if (Platform.isIOS) {
       args = <String, dynamic>{"image": imagePath, "content": contentText};
@@ -183,74 +191,24 @@
         args = <String, dynamic>{"image": imagePath, "content": contentText};
       }
     }
-    final bool version = await _channel.invokeMethod('shareOptions', args);
+    final bool? version = await _channel.invokeMethod('shareOptions', args);
     return version;
   }
 
-  static Future<String> shareWhatsapp(String content) async {
+  static Future<String?> shareWhatsapp(String content) async {
     final Map<String, dynamic> args = <String, dynamic>{"content": content};
-    final String version = await _channel.invokeMethod('shareWhatsapp', args);
+    final String? version = await _channel.invokeMethod('shareWhatsapp', args);
     return version;
   }
 
-  static Future<Map> checkInstalledAppsForShare() async {
-    final Map apps = await _channel.invokeMethod('checkInstalledApps');
+  static Future<Map?> checkInstalledAppsForShare() async {
+    final Map? apps = await _channel.invokeMethod('checkInstalledApps');
     return apps;
   }
 
-  static Future<String> shareTelegram(String content) async {
+  static Future<String?> shareTelegram(String content) async {
     final Map<String, dynamic> args = <String, dynamic>{"content": content};
-    final String version = await _channel.invokeMethod('shareTelegram', args);
-    return version;
-  }
-
-  static Future<String> shareTikTok(String contentText,
-      {String imagePath}) async {
-    Map<String, dynamic> args;
-    if (Platform.isIOS) {
-      args = <String, dynamic>{"image": imagePath, "content": contentText};
-    } else {
-      if (imagePath != null) {
-        File file = File(imagePath);
-        Uint8List bytes = file.readAsBytesSync();
-        var imagedata = bytes.buffer.asUint8List();
-        final tempDir = await getTemporaryDirectory();
-        String imageName = 'stickerAsset.png';
-        final Uint8List imageAsList = imagedata;
-        final imageDataPath = '${tempDir.path}/$imageName';
-        file = await File(imageDataPath).create();
-        file.writeAsBytesSync(imageAsList);
-        args = <String, dynamic>{"image": imageName, "content": contentText};
-      } else {
-        args = <String, dynamic>{"image": imagePath, "content": contentText};
-      }
-    }
-    final String version = await _channel.invokeMethod('shareTikTok', args);
-    return version;
-  }
-
-  static Future<String> shareLinkedin(String contentText,
-      {String imagePath}) async {
-    Map<String, dynamic> args;
-    if (Platform.isIOS) {
-      args = <String, dynamic>{"image": imagePath, "content": contentText};
-    } else {
-      if (imagePath != null) {
-        File file = File(imagePath);
-        Uint8List bytes = file.readAsBytesSync();
-        var imagedata = bytes.buffer.asUint8List();
-        final tempDir = await getTemporaryDirectory();
-        String imageName = 'stickerAsset.png';
-        final Uint8List imageAsList = imagedata;
-        final imageDataPath = '${tempDir.path}/$imageName';
-        file = await File(imageDataPath).create();
-        file.writeAsBytesSync(imageAsList);
-        args = <String, dynamic>{"image": imageName, "content": contentText};
-      } else {
-        args = <String, dynamic>{"image": imagePath, "content": contentText};
-      }
-    }
-    final String version = await _channel.invokeMethod('shareLinkedin', args);
+    final String? version = await _channel.invokeMethod('shareTelegram', args);
     return version;
   }
 
@@ -258,4 +216,4 @@
 //   final String version = await _channel.invokeMethod('shareSlack');
 //   return version;
 // }
-}
+}
\ No newline at end of file
Index: .idea/libraries/Flutter_Plugins.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><component name=\"libraryTable\">\r\n  <library name=\"Flutter Plugins\" type=\"FlutterPluginsLibraryType\">\r\n    <CLASSES>\r\n      <root url=\"file://$PROJECT_DIR$\" />\r\n      <root url=\"file:///usr/local/flutter/.pub-cache/hosted/pub.dartlang.org/path_provider_linux-2.0.0\" />\r\n      <root url=\"file:///usr/local/flutter/.pub-cache/hosted/pub.dartlang.org/path_provider-2.0.5\" />\r\n      <root url=\"file:///usr/local/flutter/.pub-cache/hosted/pub.dartlang.org/path_provider_windows-2.0.0\" />\r\n    </CLASSES>\r\n    <JAVADOC />\r\n    <SOURCES />\r\n  </library>\r\n</component>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Flutter_Plugins.xml b/.idea/libraries/Flutter_Plugins.xml
--- a/.idea/libraries/Flutter_Plugins.xml	(revision 03e823dd877da6a68b6f21f23a594f3fcd67f694)
+++ b/.idea/libraries/Flutter_Plugins.xml	(date 1649916912972)
@@ -1,10 +1,10 @@
 <component name="libraryTable">
   <library name="Flutter Plugins" type="FlutterPluginsLibraryType">
     <CLASSES>
+      <root url="file://$PROJECT_DIR$/../../Flutter Data/old/flutter/.pub-cache/hosted/pub.dartlang.org/path_provider_windows-2.0.0" />
       <root url="file://$PROJECT_DIR$" />
-      <root url="file:///usr/local/flutter/.pub-cache/hosted/pub.dartlang.org/path_provider_linux-2.0.0" />
-      <root url="file:///usr/local/flutter/.pub-cache/hosted/pub.dartlang.org/path_provider-2.0.5" />
-      <root url="file:///usr/local/flutter/.pub-cache/hosted/pub.dartlang.org/path_provider_windows-2.0.0" />
+      <root url="file://$PROJECT_DIR$/../../Flutter Data/old/flutter/.pub-cache/hosted/pub.dartlang.org/path_provider_linux-2.0.0" />
+      <root url="file://$PROJECT_DIR$/../../Flutter Data/old/flutter/.pub-cache/hosted/pub.dartlang.org/path_provider-2.0.5" />
     </CLASSES>
     <JAVADOC />
     <SOURCES />
Index: .idea/libraries/Dart_SDK.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><component name=\"libraryTable\">\r\n  <library name=\"Dart SDK\">\r\n    <CLASSES>\r\n      <root url=\"file:///usr/local/flutter/bin/cache/dart-sdk/lib/async\" />\r\n      <root url=\"file:///usr/local/flutter/bin/cache/dart-sdk/lib/cli\" />\r\n      <root url=\"file:///usr/local/flutter/bin/cache/dart-sdk/lib/collection\" />\r\n      <root url=\"file:///usr/local/flutter/bin/cache/dart-sdk/lib/convert\" />\r\n      <root url=\"file:///usr/local/flutter/bin/cache/dart-sdk/lib/core\" />\r\n      <root url=\"file:///usr/local/flutter/bin/cache/dart-sdk/lib/developer\" />\r\n      <root url=\"file:///usr/local/flutter/bin/cache/dart-sdk/lib/ffi\" />\r\n      <root url=\"file:///usr/local/flutter/bin/cache/dart-sdk/lib/html\" />\r\n      <root url=\"file:///usr/local/flutter/bin/cache/dart-sdk/lib/indexed_db\" />\r\n      <root url=\"file:///usr/local/flutter/bin/cache/dart-sdk/lib/io\" />\r\n      <root url=\"file:///usr/local/flutter/bin/cache/dart-sdk/lib/isolate\" />\r\n      <root url=\"file:///usr/local/flutter/bin/cache/dart-sdk/lib/js\" />\r\n      <root url=\"file:///usr/local/flutter/bin/cache/dart-sdk/lib/js_util\" />\r\n      <root url=\"file:///usr/local/flutter/bin/cache/dart-sdk/lib/math\" />\r\n      <root url=\"file:///usr/local/flutter/bin/cache/dart-sdk/lib/mirrors\" />\r\n      <root url=\"file:///usr/local/flutter/bin/cache/dart-sdk/lib/svg\" />\r\n      <root url=\"file:///usr/local/flutter/bin/cache/dart-sdk/lib/typed_data\" />\r\n      <root url=\"file:///usr/local/flutter/bin/cache/dart-sdk/lib/web_audio\" />\r\n      <root url=\"file:///usr/local/flutter/bin/cache/dart-sdk/lib/web_gl\" />\r\n      <root url=\"file:///usr/local/flutter/bin/cache/dart-sdk/lib/web_sql\" />\r\n    </CLASSES>\r\n    <JAVADOC />\r\n    <SOURCES />\r\n  </library>\r\n</component>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Dart_SDK.xml b/.idea/libraries/Dart_SDK.xml
--- a/.idea/libraries/Dart_SDK.xml	(revision 03e823dd877da6a68b6f21f23a594f3fcd67f694)
+++ b/.idea/libraries/Dart_SDK.xml	(date 1649916606818)
@@ -1,26 +1,25 @@
 <component name="libraryTable">
   <library name="Dart SDK">
     <CLASSES>
-      <root url="file:///usr/local/flutter/bin/cache/dart-sdk/lib/async" />
-      <root url="file:///usr/local/flutter/bin/cache/dart-sdk/lib/cli" />
-      <root url="file:///usr/local/flutter/bin/cache/dart-sdk/lib/collection" />
-      <root url="file:///usr/local/flutter/bin/cache/dart-sdk/lib/convert" />
-      <root url="file:///usr/local/flutter/bin/cache/dart-sdk/lib/core" />
-      <root url="file:///usr/local/flutter/bin/cache/dart-sdk/lib/developer" />
-      <root url="file:///usr/local/flutter/bin/cache/dart-sdk/lib/ffi" />
-      <root url="file:///usr/local/flutter/bin/cache/dart-sdk/lib/html" />
-      <root url="file:///usr/local/flutter/bin/cache/dart-sdk/lib/indexed_db" />
-      <root url="file:///usr/local/flutter/bin/cache/dart-sdk/lib/io" />
-      <root url="file:///usr/local/flutter/bin/cache/dart-sdk/lib/isolate" />
-      <root url="file:///usr/local/flutter/bin/cache/dart-sdk/lib/js" />
-      <root url="file:///usr/local/flutter/bin/cache/dart-sdk/lib/js_util" />
-      <root url="file:///usr/local/flutter/bin/cache/dart-sdk/lib/math" />
-      <root url="file:///usr/local/flutter/bin/cache/dart-sdk/lib/mirrors" />
-      <root url="file:///usr/local/flutter/bin/cache/dart-sdk/lib/svg" />
-      <root url="file:///usr/local/flutter/bin/cache/dart-sdk/lib/typed_data" />
-      <root url="file:///usr/local/flutter/bin/cache/dart-sdk/lib/web_audio" />
-      <root url="file:///usr/local/flutter/bin/cache/dart-sdk/lib/web_gl" />
-      <root url="file:///usr/local/flutter/bin/cache/dart-sdk/lib/web_sql" />
+      <root url="file://$PROJECT_DIR$/../../Flutter Data/sdk/flutter_windows_2.8.0-stable/bin/cache/dart-sdk/lib/async" />
+      <root url="file://$PROJECT_DIR$/../../Flutter Data/sdk/flutter_windows_2.8.0-stable/bin/cache/dart-sdk/lib/cli" />
+      <root url="file://$PROJECT_DIR$/../../Flutter Data/sdk/flutter_windows_2.8.0-stable/bin/cache/dart-sdk/lib/collection" />
+      <root url="file://$PROJECT_DIR$/../../Flutter Data/sdk/flutter_windows_2.8.0-stable/bin/cache/dart-sdk/lib/convert" />
+      <root url="file://$PROJECT_DIR$/../../Flutter Data/sdk/flutter_windows_2.8.0-stable/bin/cache/dart-sdk/lib/core" />
+      <root url="file://$PROJECT_DIR$/../../Flutter Data/sdk/flutter_windows_2.8.0-stable/bin/cache/dart-sdk/lib/developer" />
+      <root url="file://$PROJECT_DIR$/../../Flutter Data/sdk/flutter_windows_2.8.0-stable/bin/cache/dart-sdk/lib/ffi" />
+      <root url="file://$PROJECT_DIR$/../../Flutter Data/sdk/flutter_windows_2.8.0-stable/bin/cache/dart-sdk/lib/html" />
+      <root url="file://$PROJECT_DIR$/../../Flutter Data/sdk/flutter_windows_2.8.0-stable/bin/cache/dart-sdk/lib/indexed_db" />
+      <root url="file://$PROJECT_DIR$/../../Flutter Data/sdk/flutter_windows_2.8.0-stable/bin/cache/dart-sdk/lib/io" />
+      <root url="file://$PROJECT_DIR$/../../Flutter Data/sdk/flutter_windows_2.8.0-stable/bin/cache/dart-sdk/lib/isolate" />
+      <root url="file://$PROJECT_DIR$/../../Flutter Data/sdk/flutter_windows_2.8.0-stable/bin/cache/dart-sdk/lib/js" />
+      <root url="file://$PROJECT_DIR$/../../Flutter Data/sdk/flutter_windows_2.8.0-stable/bin/cache/dart-sdk/lib/js_util" />
+      <root url="file://$PROJECT_DIR$/../../Flutter Data/sdk/flutter_windows_2.8.0-stable/bin/cache/dart-sdk/lib/math" />
+      <root url="file://$PROJECT_DIR$/../../Flutter Data/sdk/flutter_windows_2.8.0-stable/bin/cache/dart-sdk/lib/mirrors" />
+      <root url="file://$PROJECT_DIR$/../../Flutter Data/sdk/flutter_windows_2.8.0-stable/bin/cache/dart-sdk/lib/svg" />
+      <root url="file://$PROJECT_DIR$/../../Flutter Data/sdk/flutter_windows_2.8.0-stable/bin/cache/dart-sdk/lib/typed_data" />
+      <root url="file://$PROJECT_DIR$/../../Flutter Data/sdk/flutter_windows_2.8.0-stable/bin/cache/dart-sdk/lib/web_audio" />
+      <root url="file://$PROJECT_DIR$/../../Flutter Data/sdk/flutter_windows_2.8.0-stable/bin/cache/dart-sdk/lib/web_gl" />
     </CLASSES>
     <JAVADOC />
     <SOURCES />
Index: pubspec.lock
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Generated by pub\r\n# See https://dart.dev/tools/pub/glossary#lockfile\r\npackages:\r\n  async:\r\n    dependency: transitive\r\n    description:\r\n      name: async\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"2.8.2\"\r\n  boolean_selector:\r\n    dependency: transitive\r\n    description:\r\n      name: boolean_selector\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"2.1.0\"\r\n  characters:\r\n    dependency: transitive\r\n    description:\r\n      name: characters\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"1.2.0\"\r\n  charcode:\r\n    dependency: transitive\r\n    description:\r\n      name: charcode\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"1.3.1\"\r\n  clock:\r\n    dependency: transitive\r\n    description:\r\n      name: clock\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"1.1.0\"\r\n  collection:\r\n    dependency: transitive\r\n    description:\r\n      name: collection\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"1.15.0\"\r\n  fake_async:\r\n    dependency: transitive\r\n    description:\r\n      name: fake_async\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"1.2.0\"\r\n  ffi:\r\n    dependency: transitive\r\n    description:\r\n      name: ffi\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"1.0.0\"\r\n  file:\r\n    dependency: transitive\r\n    description:\r\n      name: file\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"6.1.0\"\r\n  flutter:\r\n    dependency: \"direct main\"\r\n    description: flutter\r\n    source: sdk\r\n    version: \"0.0.0\"\r\n  flutter_test:\r\n    dependency: \"direct dev\"\r\n    description: flutter\r\n    source: sdk\r\n    version: \"0.0.0\"\r\n  matcher:\r\n    dependency: transitive\r\n    description:\r\n      name: matcher\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"0.12.11\"\r\n  meta:\r\n    dependency: transitive\r\n    description:\r\n      name: meta\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"1.7.0\"\r\n  path:\r\n    dependency: transitive\r\n    description:\r\n      name: path\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"1.8.0\"\r\n  path_provider:\r\n    dependency: \"direct main\"\r\n    description:\r\n      name: path_provider\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"2.0.5\"\r\n  path_provider_linux:\r\n    dependency: transitive\r\n    description:\r\n      name: path_provider_linux\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"2.0.0\"\r\n  path_provider_macos:\r\n    dependency: transitive\r\n    description:\r\n      name: path_provider_macos\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"2.0.0\"\r\n  path_provider_platform_interface:\r\n    dependency: transitive\r\n    description:\r\n      name: path_provider_platform_interface\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"2.0.1\"\r\n  path_provider_windows:\r\n    dependency: transitive\r\n    description:\r\n      name: path_provider_windows\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"2.0.0\"\r\n  platform:\r\n    dependency: transitive\r\n    description:\r\n      name: platform\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"3.0.0\"\r\n  plugin_platform_interface:\r\n    dependency: transitive\r\n    description:\r\n      name: plugin_platform_interface\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"2.0.0\"\r\n  process:\r\n    dependency: transitive\r\n    description:\r\n      name: process\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"4.1.0\"\r\n  sky_engine:\r\n    dependency: transitive\r\n    description: flutter\r\n    source: sdk\r\n    version: \"0.0.99\"\r\n  source_span:\r\n    dependency: transitive\r\n    description:\r\n      name: source_span\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"1.8.1\"\r\n  stack_trace:\r\n    dependency: transitive\r\n    description:\r\n      name: stack_trace\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"1.10.0\"\r\n  stream_channel:\r\n    dependency: transitive\r\n    description:\r\n      name: stream_channel\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"2.1.0\"\r\n  string_scanner:\r\n    dependency: transitive\r\n    description:\r\n      name: string_scanner\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"1.1.0\"\r\n  term_glyph:\r\n    dependency: transitive\r\n    description:\r\n      name: term_glyph\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"1.2.0\"\r\n  test_api:\r\n    dependency: transitive\r\n    description:\r\n      name: test_api\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"0.4.3\"\r\n  typed_data:\r\n    dependency: transitive\r\n    description:\r\n      name: typed_data\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"1.3.0\"\r\n  vector_math:\r\n    dependency: transitive\r\n    description:\r\n      name: vector_math\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"2.1.1\"\r\n  win32:\r\n    dependency: transitive\r\n    description:\r\n      name: win32\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"2.0.4\"\r\n  xdg_directories:\r\n    dependency: transitive\r\n    description:\r\n      name: xdg_directories\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"0.2.0\"\r\nsdks:\r\n  dart: \">=2.14.0 <3.0.0\"\r\n  flutter: \">=2.5.0\"\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pubspec.lock b/pubspec.lock
--- a/pubspec.lock	(revision 03e823dd877da6a68b6f21f23a594f3fcd67f694)
+++ b/pubspec.lock	(date 1649916879188)
@@ -81,6 +81,13 @@
       url: "https://pub.dartlang.org"
     source: hosted
     version: "0.12.11"
+  material_color_utilities:
+    dependency: transitive
+    description:
+      name: material_color_utilities
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "0.1.3"
   meta:
     dependency: transitive
     description:
@@ -197,7 +204,7 @@
       name: test_api
       url: "https://pub.dartlang.org"
     source: hosted
-    version: "0.4.3"
+    version: "0.4.8"
   typed_data:
     dependency: transitive
     description:
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"NONE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"d284a3b7-6ce1-4c0f-9d83-fa9a0ddbc603\" name=\"Default Changelist\" comment=\"\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"DefaultGradleProjectSettings\">\r\n    <option name=\"isMigrated\" value=\"true\" />\r\n  </component>\r\n  <component name=\"ExecutionTargetManager\" SELECTED_TARGET=\"device_and_snapshot_combo_box_target[]\" />\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"IdeDocumentHistory\">\r\n    <option name=\"CHANGED_PATHS\">\r\n      <list>\r\n        <option value=\"$PROJECT_DIR$/pubspec.yaml\" />\r\n        <option value=\"$PROJECT_DIR$/example/lib/main.dart\" />\r\n        <option value=\"$PROJECT_DIR$/lib/social_share.dart\" />\r\n        <option value=\"$PROJECT_DIR$/ios/Classes/SocialSharePlugin.m\" />\r\n        <option value=\"$PROJECT_DIR$/android/src/main/kotlin/com/shekarmudaliyar/social_share/SocialSharePlugin.kt\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectFrameBounds\" fullScreen=\"true\">\r\n    <option name=\"x\" value=\"62\" />\r\n    <option name=\"y\" value=\"55\" />\r\n    <option name=\"width\" value=\"1332\" />\r\n    <option name=\"height\" value=\"747\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"1zHFvIJvXBRBLnLMkahf6bLXN0r\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectView\">\r\n    <navigator currentView=\"Scope\" currentSubView=\"Scope 'Project Files'; set:Project Files; class com.intellij.psi.search.scope.ProjectFilesScope\" proportions=\"\" version=\"1\">\r\n      <foldersAlwaysOnTop value=\"true\" />\r\n    </navigator>\r\n    <panes>\r\n      <pane id=\"Scope\">\r\n        <subPane subId=\"Scope 'Project Files'; set:Project Files; class com.intellij.psi.search.scope.ProjectFilesScope\">\r\n          <expand>\r\n            <path>\r\n              <item name=\"social_share\" type=\"3d21c010:ScopeViewTreeModel$ProjectNode\" />\r\n              <item name=\"~/Documents/dev/social_share\" type=\"442cc68d:ScopeViewTreeModel$RootNode\" />\r\n            </path>\r\n            <path>\r\n              <item name=\"social_share\" type=\"3d21c010:ScopeViewTreeModel$ProjectNode\" />\r\n              <item name=\"~/Documents/dev/social_share\" type=\"442cc68d:ScopeViewTreeModel$RootNode\" />\r\n              <item name=\"android\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\r\n            </path>\r\n            <path>\r\n              <item name=\"social_share\" type=\"3d21c010:ScopeViewTreeModel$ProjectNode\" />\r\n              <item name=\"~/Documents/dev/social_share\" type=\"442cc68d:ScopeViewTreeModel$RootNode\" />\r\n              <item name=\"android\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\r\n              <item name=\"src\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\r\n            </path>\r\n            <path>\r\n              <item name=\"social_share\" type=\"3d21c010:ScopeViewTreeModel$ProjectNode\" />\r\n              <item name=\"~/Documents/dev/social_share\" type=\"442cc68d:ScopeViewTreeModel$RootNode\" />\r\n              <item name=\"android\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\r\n              <item name=\"src\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\r\n              <item name=\"main\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\r\n            </path>\r\n            <path>\r\n              <item name=\"social_share\" type=\"3d21c010:ScopeViewTreeModel$ProjectNode\" />\r\n              <item name=\"~/Documents/dev/social_share\" type=\"442cc68d:ScopeViewTreeModel$RootNode\" />\r\n              <item name=\"android\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\r\n              <item name=\"src\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\r\n              <item name=\"main\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\r\n              <item name=\"kotlin\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\r\n            </path>\r\n            <path>\r\n              <item name=\"social_share\" type=\"3d21c010:ScopeViewTreeModel$ProjectNode\" />\r\n              <item name=\"~/Documents/dev/social_share\" type=\"442cc68d:ScopeViewTreeModel$RootNode\" />\r\n              <item name=\"android\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\r\n              <item name=\"src\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\r\n              <item name=\"main\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\r\n              <item name=\"kotlin\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\r\n              <item name=\"com\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\r\n            </path>\r\n            <path>\r\n              <item name=\"social_share\" type=\"3d21c010:ScopeViewTreeModel$ProjectNode\" />\r\n              <item name=\"~/Documents/dev/social_share\" type=\"442cc68d:ScopeViewTreeModel$RootNode\" />\r\n              <item name=\"android\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\r\n              <item name=\"src\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\r\n              <item name=\"main\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\r\n              <item name=\"kotlin\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\r\n              <item name=\"com\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\r\n              <item name=\"shekarmudaliyar\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\r\n            </path>\r\n            <path>\r\n              <item name=\"social_share\" type=\"3d21c010:ScopeViewTreeModel$ProjectNode\" />\r\n              <item name=\"~/Documents/dev/social_share\" type=\"442cc68d:ScopeViewTreeModel$RootNode\" />\r\n              <item name=\"android\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\r\n              <item name=\"src\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\r\n              <item name=\"main\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\r\n              <item name=\"kotlin\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\r\n              <item name=\"com\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\r\n              <item name=\"shekarmudaliyar\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\r\n              <item name=\"social_share\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\r\n            </path>\r\n            <path>\r\n              <item name=\"social_share\" type=\"3d21c010:ScopeViewTreeModel$ProjectNode\" />\r\n              <item name=\"~/Documents/dev/social_share\" type=\"442cc68d:ScopeViewTreeModel$RootNode\" />\r\n              <item name=\"lib\" type=\"9f88c78c:ScopeViewTreeModel$FileNode\" />\r\n            </path>\r\n          </expand>\r\n          <select />\r\n        </subPane>\r\n      </pane>\r\n      <pane id=\"ProjectPane\">\r\n        <subPane>\r\n          <expand>\r\n            <path>\r\n              <item name=\"social_share\" type=\"b2602c69:ProjectViewProjectNode\" />\r\n              <item name=\"social_share\" type=\"462c0819:PsiDirectoryNode\" />\r\n            </path>\r\n            <path>\r\n              <item name=\"social_share\" type=\"b2602c69:ProjectViewProjectNode\" />\r\n              <item name=\"social_share\" type=\"462c0819:PsiDirectoryNode\" />\r\n              <item name=\"ios\" type=\"462c0819:PsiDirectoryNode\" />\r\n            </path>\r\n          </expand>\r\n          <select />\r\n        </subPane>\r\n      </pane>\r\n      <pane id=\"AndroidView\" />\r\n      <pane id=\"PackagesPane\" />\r\n    </panes>\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"dart.analysis.tool.window.force.activate\" value=\"false\" />\r\n    <property name=\"dart.analysis.tool.window.visible\" value=\"false\" />\r\n    <property name=\"io.flutter.reload.alreadyRun\" value=\"true\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"preferences.lookFeel\" />\r\n    <property name=\"show.migrate.to.gradle.popup\" value=\"false\" />\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"SvnConfiguration\">\r\n    <configuration />\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"d284a3b7-6ce1-4c0f-9d83-fa9a0ddbc603\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1575884091134</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1575884091134</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"ToolWindowManager\">\r\n    <frame x=\"0\" y=\"0\" width=\"1440\" height=\"900\" extended-state=\"0\" />\r\n    <editor active=\"true\" />\r\n    <layout>\r\n      <window_info active=\"true\" content_ui=\"combo\" id=\"Project\" order=\"0\" visible=\"true\" weight=\"0.24892704\" />\r\n      <window_info id=\"Captures\" order=\"1\" side_tool=\"true\" />\r\n      <window_info id=\"Structure\" order=\"2\" side_tool=\"true\" />\r\n      <window_info id=\"Image Layers\" order=\"3\" />\r\n      <window_info id=\"Designer\" order=\"4\" />\r\n      <window_info id=\"Build Variants\" order=\"5\" side_tool=\"true\" />\r\n      <window_info id=\"Resources Explorer\" order=\"6\" />\r\n      <window_info id=\"Capture Tool\" order=\"7\" />\r\n      <window_info id=\"Favorites\" order=\"8\" side_tool=\"true\" />\r\n      <window_info anchor=\"bottom\" id=\"Dart Analysis\" order=\"0\" weight=\"0.32977098\" />\r\n      <window_info anchor=\"bottom\" id=\"Run\" order=\"1\" weight=\"0.32977098\" />\r\n      <window_info anchor=\"bottom\" id=\"TODO\" order=\"2\" />\r\n      <window_info anchor=\"bottom\" id=\"Android Profiler\" order=\"3\" show_stripe_button=\"false\" />\r\n      <window_info anchor=\"bottom\" id=\"Logcat\" order=\"4\" />\r\n      <window_info anchor=\"bottom\" id=\"Debug\" order=\"5\" />\r\n      <window_info anchor=\"bottom\" id=\"Terminal\" order=\"6\" />\r\n      <window_info anchor=\"bottom\" id=\"Event Log\" order=\"7\" side_tool=\"true\" />\r\n      <window_info anchor=\"bottom\" id=\"Version Control\" order=\"8\" />\r\n      <window_info anchor=\"bottom\" id=\"Messages\" order=\"9\" weight=\"0.32977098\" />\r\n      <window_info anchor=\"right\" id=\"Device File Explorer\" order=\"0\" side_tool=\"true\" />\r\n      <window_info anchor=\"right\" id=\"Capture Analysis\" order=\"1\" />\r\n      <window_info anchor=\"right\" id=\"Theme Preview\" order=\"2\" />\r\n      <window_info anchor=\"right\" id=\"Flutter Inspector\" order=\"3\" />\r\n      <window_info anchor=\"right\" id=\"Flutter Outline\" order=\"4\" />\r\n      <window_info anchor=\"right\" id=\"Palette&#9;\" order=\"5\" />\r\n      <window_info anchor=\"right\" id=\"Flutter Performance\" order=\"6\" />\r\n    </layout>\r\n  </component>\r\n  <component name=\"editorHistoryManager\">\r\n    <entry file=\"file://$PROJECT_DIR$/lib/social_share.dart\">\r\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\r\n        <state relative-caret-position=\"1005\">\r\n          <caret line=\"70\" column=\"3\" selection-start-line=\"70\" selection-start-column=\"3\" selection-end-line=\"70\" selection-end-column=\"3\" />\r\n        </state>\r\n      </provider>\r\n    </entry>\r\n    <entry file=\"file://$PROJECT_DIR$/ios/social_share.podspec\">\r\n      <provider selected=\"true\" editor-type-id=\"text-editor\" />\r\n    </entry>\r\n    <entry file=\"file://$PROJECT_DIR$/ios/Classes/SocialSharePlugin.h\">\r\n      <provider selected=\"true\" editor-type-id=\"text-editor\" />\r\n    </entry>\r\n    <entry file=\"file://$PROJECT_DIR$/pubspec.yaml\">\r\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\r\n        <state relative-caret-position=\"255\">\r\n          <caret line=\"18\" selection-start-line=\"18\" selection-end-line=\"18\" />\r\n        </state>\r\n      </provider>\r\n    </entry>\r\n    <entry file=\"file://$PROJECT_DIR$/ios/Classes/SocialSharePlugin.m\">\r\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\r\n        <state relative-caret-position=\"630\">\r\n          <caret line=\"42\" column=\"12\" selection-start-line=\"42\" selection-start-column=\"12\" selection-end-line=\"42\" selection-end-column=\"12\" />\r\n        </state>\r\n      </provider>\r\n    </entry>\r\n    <entry file=\"file://$PROJECT_DIR$/example/pubspec.yaml\">\r\n      <provider selected=\"true\" editor-type-id=\"text-editor\" />\r\n    </entry>\r\n    <entry file=\"file://$PROJECT_DIR$/example/lib/main.dart\">\r\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\r\n        <state relative-caret-position=\"195\">\r\n          <caret line=\"21\" selection-start-line=\"21\" selection-end-line=\"21\" />\r\n        </state>\r\n      </provider>\r\n    </entry>\r\n    <entry file=\"file://$PROJECT_DIR$/android/src/main/AndroidManifest.xml\">\r\n      <provider selected=\"true\" editor-type-id=\"text-editor\" />\r\n    </entry>\r\n    <entry file=\"file://$PROJECT_DIR$/android/src/main/kotlin/com/shekarmudaliyar/social_share/SocialSharePlugin.kt\">\r\n      <provider selected=\"true\" editor-type-id=\"text-editor\">\r\n        <state relative-caret-position=\"620\">\r\n          <caret line=\"154\" column=\"46\" lean-forward=\"true\" selection-start-line=\"154\" selection-start-column=\"46\" selection-end-line=\"154\" selection-end-column=\"46\" />\r\n        </state>\r\n      </provider>\r\n    </entry>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 03e823dd877da6a68b6f21f23a594f3fcd67f694)
+++ b/.idea/workspace.xml	(date 1649916912983)
@@ -4,7 +4,14 @@
     <option name="autoReloadType" value="NONE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="d284a3b7-6ce1-4c0f-9d83-fa9a0ddbc603" name="Default Changelist" comment="" />
+    <list default="true" id="d284a3b7-6ce1-4c0f-9d83-fa9a0ddbc603" name="Default Changelist" comment="">
+      <change beforePath="$PROJECT_DIR$/.idea/libraries/Dart_SDK.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/libraries/Dart_SDK.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/libraries/Flutter_Plugins.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/libraries/Flutter_Plugins.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/android/src/main/kotlin/com/shekarmudaliyar/social_share/SocialSharePlugin.kt" beforeDir="false" afterPath="$PROJECT_DIR$/android/src/main/kotlin/com/shekarmudaliyar/social_share/SocialSharePlugin.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/example/pubspec.lock" beforeDir="false" afterPath="$PROJECT_DIR$/example/pubspec.lock" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/lib/social_share.dart" beforeDir="false" afterPath="$PROJECT_DIR$/lib/social_share.dart" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pubspec.lock" beforeDir="false" afterPath="$PROJECT_DIR$/pubspec.lock" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -13,7 +20,7 @@
   <component name="DefaultGradleProjectSettings">
     <option name="isMigrated" value="true" />
   </component>
-  <component name="ExecutionTargetManager" SELECTED_TARGET="device_and_snapshot_combo_box_target[]" />
+  <component name="ExecutionTargetManager" SELECTED_TARGET="device_and_snapshot_combo_box_target[C:\Users\Andhika\.android\avd\Pixel_2_API_30.avd]" />
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
@@ -138,6 +145,8 @@
     <option name="showLibraryContents" value="true" />
   </component>
   <component name="PropertiesComponent">
+    <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
+    <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
     <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
     <property name="dart.analysis.tool.window.force.activate" value="false" />
     <property name="dart.analysis.tool.window.visible" value="false" />
Index: android/src/main/kotlin/com/shekarmudaliyar/social_share/SocialSharePlugin.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.shekarmudaliyar.social_share\r\n\r\nimport android.app.Activity\r\nimport android.content.*\r\nimport android.content.pm.PackageManager\r\nimport android.content.pm.ResolveInfo\r\nimport android.net.Uri\r\nimport android.os.Build\r\nimport android.util.Log\r\nimport androidx.annotation.NonNull\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.core.content.ContextCompat.startActivity\r\nimport androidx.core.content.FileProvider\r\nimport io.flutter.plugin.common.MethodCall\r\nimport io.flutter.plugin.common.MethodChannel\r\nimport io.flutter.plugin.common.MethodChannel.MethodCallHandler\r\nimport io.flutter.plugin.common.MethodChannel.Result\r\nimport io.flutter.plugin.common.PluginRegistry.Registrar\r\nimport java.io.File\r\n\r\n/** SocialSharePlugin */\r\nclass SocialSharePlugin(private val registrar: Registrar):  MethodCallHandler {\r\n\r\n    companion object {\r\n        @JvmStatic\r\n        fun registerWith(registrar: Registrar) {\r\n            val channel = MethodChannel(registrar.messenger(), \"social_share\")\r\n            channel.setMethodCallHandler(SocialSharePlugin(registrar))\r\n        }\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR1)\r\n    override fun onMethodCall(@NonNull call: MethodCall, @NonNull result: Result) {\r\n        if (call.method == \"shareInstagramStory\") {\r\n            //share on instagram story\r\n            val stickerImage: String? = call.argument(\"stickerImage\")\r\n            val backgroundImage: String? = call.argument(\"backgroundImage\")\r\n\r\n            val backgroundTopColor: String? = call.argument(\"backgroundTopColor\")\r\n            val backgroundBottomColor: String? = call.argument(\"backgroundBottomColor\")\r\n            val attributionURL: String? = call.argument(\"attributionURL\")\r\n            val file =  File(registrar.activeContext().cacheDir,stickerImage)\r\n            val stickerImageFile = FileProvider.getUriForFile(registrar.activeContext(), registrar.activeContext().applicationContext.packageName + \".com.shekarmudaliyar.social_share\", file)\r\n\r\n            val intent = Intent(\"com.instagram.share.ADD_TO_STORY\")\r\n            intent.type = \"image/*\"\r\n            intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)\r\n            intent.putExtra(\"interactive_asset_uri\", stickerImageFile)\r\n            if (backgroundImage!=null) {\r\n                //check if background image is also provided\r\n                val backfile =  File(registrar.activeContext().cacheDir,backgroundImage)\r\n                val backgroundImageFile = FileProvider.getUriForFile(registrar.activeContext(), registrar.activeContext().applicationContext.packageName + \".com.shekarmudaliyar.social_share\", backfile)\r\n                intent.setDataAndType(backgroundImageFile,\"image/*\")\r\n            }\r\n\r\n            intent.putExtra(\"content_url\", attributionURL)\r\n            intent.putExtra(\"top_background_color\", backgroundTopColor)\r\n            intent.putExtra(\"bottom_background_color\", backgroundBottomColor)\r\n            Log.d(\"\", registrar.activity().toString())\r\n            // Instantiate activity and verify it will resolve implicit intent\r\n            val activity: Activity = registrar.activity()\r\n            activity.grantUriPermission(\"com.instagram.android\", stickerImageFile, Intent.FLAG_GRANT_READ_URI_PERMISSION)\r\n            if (activity.packageManager.resolveActivity(intent, 0) != null) {\r\n                registrar.activeContext().startActivity(intent)\r\n                result.success(\"success\")\r\n            } else {\r\n                result.success(\"error\")\r\n            }\r\n        } else if (call.method == \"shareFacebookStory\") {\r\n            //share on facebook story\r\n            val stickerImage: String? = call.argument(\"stickerImage\")\r\n            val backgroundTopColor: String? = call.argument(\"backgroundTopColor\")\r\n            val backgroundBottomColor: String? = call.argument(\"backgroundBottomColor\")\r\n            val attributionURL: String? = call.argument(\"attributionURL\")\r\n            val appId: String? = call.argument(\"appId\")\r\n\r\n            val file =  File(registrar.activeContext().cacheDir,stickerImage)\r\n            val stickerImageFile = FileProvider.getUriForFile(registrar.activeContext(), registrar.activeContext().applicationContext.packageName + \".com.shekarmudaliyar.social_share\", file)\r\n            val intent = Intent(\"com.facebook.stories.ADD_TO_STORY\")\r\n            intent.type = \"image/*\"\r\n            intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)\r\n            intent.putExtra(\"com.facebook.platform.extra.APPLICATION_ID\", appId)\r\n            intent.putExtra(\"interactive_asset_uri\", stickerImageFile)\r\n            intent.putExtra(\"content_url\", attributionURL)\r\n            intent.putExtra(\"top_background_color\", backgroundTopColor)\r\n            intent.putExtra(\"bottom_background_color\", backgroundBottomColor)\r\n            Log.d(\"\", registrar.activity().toString())\r\n            // Instantiate activity and verify it will resolve implicit intent\r\n            val activity: Activity = registrar.activity()\r\n            activity.grantUriPermission(\"com.facebook.katana\", stickerImageFile, Intent.FLAG_GRANT_READ_URI_PERMISSION)\r\n            if (activity.packageManager.resolveActivity(intent, 0) != null) {\r\n                registrar.activeContext().startActivity(intent)\r\n                result.success(\"success\")\r\n            } else {\r\n                result.success(\"error\")\r\n            }\r\n        } else if (call.method == \"shareOptions\") {\r\n            //native share options\r\n            val content: String? = call.argument(\"content\")\r\n            val image: String? = call.argument(\"image\")\r\n            val intent = Intent()\r\n            intent.action = Intent.ACTION_SEND\r\n\r\n            if (image!=null) {\r\n                //check if  image is also provided\r\n                val imagefile =  File(registrar.activeContext().cacheDir,image)\r\n                val imageFileUri = FileProvider.getUriForFile(registrar.activeContext(), registrar.activeContext().applicationContext.packageName + \".com.shekarmudaliyar.social_share\", imagefile)\r\n                intent.type = \"image/*\"\r\n                intent.putExtra(Intent.EXTRA_STREAM,imageFileUri)\r\n            } else {\r\n                intent.type = \"text/plain\";\r\n            }\r\n\r\n            intent.putExtra(Intent.EXTRA_TEXT, content)\r\n\r\n            //create chooser intent to launch intent\r\n            //source: \"share\" package by flutter (https://github.com/flutter/plugins/blob/master/packages/share/)\r\n            val chooserIntent: Intent = Intent.createChooser(intent, null /* dialog title optional */)\r\n\r\n            registrar.activeContext().startActivity(chooserIntent)\r\n            result.success(true)\r\n\r\n        } else if (call.method == \"copyToClipboard\") {\r\n            //copies content onto the clipboard\r\n            val content: String? = call.argument(\"content\")\r\n            val clipboard =registrar.context().getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager\r\n            val clip = ClipData.newPlainText(\"\", content)\r\n            clipboard.primaryClip = clip\r\n            result.success(true)\r\n        } else if (call.method == \"shareWhatsapp\") {\r\n            //shares content on WhatsApp\r\n            val content: String? = call.argument(\"content\")\r\n            val whatsappIntent = Intent(Intent.ACTION_SEND)\r\n            whatsappIntent.type = \"text/plain\"\r\n            whatsappIntent.setPackage(\"com.whatsapp\")\r\n            whatsappIntent.putExtra(Intent.EXTRA_TEXT, content)\r\n            try {\r\n                registrar.activity().startActivity(whatsappIntent)\r\n                result.success(\"true\")\r\n            } catch (ex: ActivityNotFoundException) {\r\n                result.success(\"false\")\r\n            }\r\n        } else if (call.method == \"shareSms\") {\r\n            //shares content on sms\r\n            val content: String? = call.argument(\"message\")\r\n            val intent = Intent(Intent.ACTION_SENDTO)\r\n            intent.addCategory(Intent.CATEGORY_DEFAULT)\r\n            intent.type = \"vnd.android-dir/mms-sms\"\r\n            intent.data = Uri.parse(\"sms:\" )\r\n            intent.putExtra(\"sms_body\", content)\r\n            try {\r\n                registrar.activity().startActivity(intent)\r\n                result.success(\"true\")\r\n            } catch (ex: ActivityNotFoundException) {\r\n                result.success(\"false\")\r\n            }\r\n        } else if (call.method == \"shareTwitter\") {\r\n            //shares content on twitter\r\n            val text: String? = call.argument(\"captionText\")\r\n            val url: String? = call.argument(\"url\")\r\n            val trailingText: String? = call.argument(\"trailingText\")\r\n            val urlScheme = \"http://www.twitter.com/intent/tweet?text=$text$url$trailingText\"\r\n            Log.d(\"log\",urlScheme)\r\n            val intent = Intent(Intent.ACTION_VIEW)\r\n            intent.data = Uri.parse(urlScheme)\r\n            try {\r\n                registrar.activity().startActivity(intent)\r\n                result.success(\"true\")\r\n            } catch (ex: ActivityNotFoundException) {\r\n                result.success(\"false\")\r\n            }\r\n        }\r\n        else if (call.method == \"shareTelegram\") {\r\n            //shares content on Telegram\r\n            val content: String? = call.argument(\"content\")\r\n            val telegramIntent = Intent(Intent.ACTION_SEND)\r\n            telegramIntent.type = \"text/plain\"\r\n            telegramIntent.setPackage(\"org.telegram.messenger\")\r\n            telegramIntent.putExtra(Intent.EXTRA_TEXT, content)\r\n            try {\r\n                registrar.activity().startActivity(telegramIntent)\r\n                result.success(\"true\")\r\n            } catch (ex: ActivityNotFoundException) {\r\n                result.success(\"false\")\r\n            }\r\n        }\r\n        else if (call.method == \"checkInstalledApps\") {\r\n            //check if the apps exists\r\n            //creating a mutable map of apps\r\n            var apps:MutableMap<String, Boolean> = mutableMapOf()\r\n            //assigning package manager\r\n            val pm: PackageManager =registrar.context().packageManager\r\n            //get a list of installed apps.\r\n            val packages = pm.getInstalledApplications(PackageManager.GET_META_DATA)\r\n            //intent to check sms app exists\r\n            val intent = Intent(Intent.ACTION_SENDTO).addCategory(Intent.CATEGORY_DEFAULT)\r\n            intent.type = \"vnd.android-dir/mms-sms\"\r\n            intent.data = Uri.parse(\"sms:\" )\r\n            val resolvedActivities: List<ResolveInfo>  = pm.queryIntentActivities(intent, 0)\r\n            //if sms app exists\r\n            apps[\"sms\"] = resolvedActivities.isNotEmpty()\r\n            //if other app exists\r\n            apps[\"instagram\"] = packages.any  { it.packageName.toString().contentEquals(\"com.instagram.android\") }\r\n            apps[\"facebook\"] = packages.any  { it.packageName.toString().contentEquals(\"com.facebook.katana\") }\r\n            apps[\"twitter\"] = packages.any  { it.packageName.toString().contentEquals(\"com.twitter.android\") }\r\n            apps[\"linkedin\"] = packages.any  { it.packageName.toString().contentEquals(\"com.linkedin.android\") }\r\n            apps[\"whatsapp\"] = packages.any  { it.packageName.toString().contentEquals(\"com.whatsapp\") }\r\n            apps[\"telegram\"] = packages.any  { it.packageName.toString().contentEquals(\"org.telegram.messenger\") }\r\n\r\n            result.success(apps)\r\n        } else if (call.method == \"shareTikTok\") {\r\n            //native share options\r\n            val content: String? = call.argument(\"content\")\r\n            val image: String? = call.argument(\"image\")\r\n            val intent = Intent()\r\n            intent.action = Intent.ACTION_SEND\r\n\r\n            if (image!=null) {\r\n                //check if  image is also provided\r\n                val imagefile =  File(registrar.activeContext().cacheDir,image)\r\n                val imageFileUri = FileProvider.getUriForFile(registrar.activeContext(), registrar.activeContext().applicationContext.packageName + \".com.shekarmudaliyar.social_share\", imagefile)\r\n                intent.type = \"image/*\"\r\n                intent.putExtra(Intent.EXTRA_STREAM,imageFileUri)\r\n                intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)\r\n            } else {\r\n                intent.type = \"text/plain\";\r\n            }\r\n            intent.putExtra(Intent.EXTRA_TEXT, content)\r\n            intent.setPackage(\"com.ss.android.ugc.trill\")\r\n            val chooserIntent: Intent = Intent.createChooser(intent, null /* dialog title optional */)\r\n            registrar.activeContext().startActivity(chooserIntent)\r\n            result.success(\"true\")\r\n            //create chooser intent to launch intent\r\n            //source: \"share\" package by flutter (https://github.com/flutter/plugins/blob/master/packages/share/)\r\n            //try {\r\n                //registrar.activity().startActivity(intent)\r\n               /// result.success(\"true\")\r\n            //} catch (ex: ActivityNotFoundException) {\r\n                //result.success(\"false\")\r\n            //}\r\n\r\n        }\r\n        else if (call.method == \"shareLinkedin\") {\r\n            //native share options\r\n            val content: String? = call.argument(\"content\")\r\n            val image: String? = call.argument(\"image\")\r\n            val intent = Intent()\r\n            intent.action = Intent.ACTION_SEND\r\n\r\n            if (image!=null) {\r\n                //check if  image is also provided\r\n                val imagefile =  File(registrar.activeContext().cacheDir,image)\r\n                val imageFileUri = FileProvider.getUriForFile(registrar.activeContext(), registrar.activeContext().applicationContext.packageName + \".com.shekarmudaliyar.social_share\", imagefile)\r\n                intent.type = \"image/*\"\r\n                intent.putExtra(Intent.EXTRA_STREAM,imageFileUri)\r\n                intent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION)\r\n            } else {\r\n                intent.type = \"text/plain\";\r\n            }\r\n            intent.putExtra(Intent.EXTRA_TEXT, content)\r\n            intent.setPackage(\"com.linkedin.android\")\r\n            val chooserIntent: Intent = Intent.createChooser(intent, null /* dialog title optional */)\r\n            registrar.activeContext().startActivity(chooserIntent)\r\n            result.success(\"true\")\r\n        }\r\n        else {\r\n            result.notImplemented()\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/android/src/main/kotlin/com/shekarmudaliyar/social_share/SocialSharePlugin.kt b/android/src/main/kotlin/com/shekarmudaliyar/social_share/SocialSharePlugin.kt
--- a/android/src/main/kotlin/com/shekarmudaliyar/social_share/SocialSharePlugin.kt	(revision 03e823dd877da6a68b6f21f23a594f3fcd67f694)
+++ b/android/src/main/kotlin/com/shekarmudaliyar/social_share/SocialSharePlugin.kt	(date 1649916575171)
@@ -8,8 +8,9 @@
 import android.os.Build
 import android.util.Log
 import androidx.annotation.NonNull
-import androidx.annotation.RequiresApi
-import androidx.core.content.ContextCompat.startActivity
+import io.flutter.embedding.engine.plugins.FlutterPlugin
+import io.flutter.embedding.engine.plugins.activity.ActivityAware
+import io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding
 import androidx.core.content.FileProvider
 import io.flutter.plugin.common.MethodCall
 import io.flutter.plugin.common.MethodChannel
@@ -18,19 +19,21 @@
 import io.flutter.plugin.common.PluginRegistry.Registrar
 import java.io.File
 
-/** SocialSharePlugin */
-class SocialSharePlugin(private val registrar: Registrar):  MethodCallHandler {
+class SocialSharePlugin:FlutterPlugin, MethodCallHandler, ActivityAware {
+    private lateinit var channel: MethodChannel
+    private var activity: Activity? = null
+    private var activeContext: Context? = null
+    private var context: Context? = null
 
-    companion object {
-        @JvmStatic
-        fun registerWith(registrar: Registrar) {
-            val channel = MethodChannel(registrar.messenger(), "social_share")
-            channel.setMethodCallHandler(SocialSharePlugin(registrar))
-        }
+    override fun onAttachedToEngine(@NonNull flutterPluginBinding: FlutterPlugin.FlutterPluginBinding) {
+        context = flutterPluginBinding.applicationContext
+        channel = MethodChannel(flutterPluginBinding.binaryMessenger, "social_share")
+        channel.setMethodCallHandler(this)
     }
 
-    @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
     override fun onMethodCall(@NonNull call: MethodCall, @NonNull result: Result) {
+        activeContext = if (activity != null) activity!!.applicationContext else context!!
+
         if (call.method == "shareInstagramStory") {
             //share on instagram story
             val stickerImage: String? = call.argument("stickerImage")
@@ -39,29 +42,28 @@
             val backgroundTopColor: String? = call.argument("backgroundTopColor")
             val backgroundBottomColor: String? = call.argument("backgroundBottomColor")
             val attributionURL: String? = call.argument("attributionURL")
-            val file =  File(registrar.activeContext().cacheDir,stickerImage)
-            val stickerImageFile = FileProvider.getUriForFile(registrar.activeContext(), registrar.activeContext().applicationContext.packageName + ".com.shekarmudaliyar.social_share", file)
+            val file =  File(activeContext!!.cacheDir,stickerImage)
+            val stickerImageFile = FileProvider.getUriForFile(activeContext!!, activeContext!!.applicationContext.packageName + ".com.shekarmudaliyar.social_share", file)
 
             val intent = Intent("com.instagram.share.ADD_TO_STORY")
             intent.type = "image/*"
             intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)
+            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
             intent.putExtra("interactive_asset_uri", stickerImageFile)
             if (backgroundImage!=null) {
                 //check if background image is also provided
-                val backfile =  File(registrar.activeContext().cacheDir,backgroundImage)
-                val backgroundImageFile = FileProvider.getUriForFile(registrar.activeContext(), registrar.activeContext().applicationContext.packageName + ".com.shekarmudaliyar.social_share", backfile)
+                val backfile =  File(activeContext!!.cacheDir,backgroundImage)
+                val backgroundImageFile = FileProvider.getUriForFile(activeContext!!, activeContext!!.applicationContext.packageName + ".com.shekarmudaliyar.social_share", backfile)
                 intent.setDataAndType(backgroundImageFile,"image/*")
             }
-
             intent.putExtra("content_url", attributionURL)
             intent.putExtra("top_background_color", backgroundTopColor)
             intent.putExtra("bottom_background_color", backgroundBottomColor)
-            Log.d("", registrar.activity().toString())
+            Log.d("", activity!!.toString())
             // Instantiate activity and verify it will resolve implicit intent
-            val activity: Activity = registrar.activity()
-            activity.grantUriPermission("com.instagram.android", stickerImageFile, Intent.FLAG_GRANT_READ_URI_PERMISSION)
-            if (activity.packageManager.resolveActivity(intent, 0) != null) {
-                registrar.activeContext().startActivity(intent)
+            activity!!.grantUriPermission("com.instagram.android", stickerImageFile, Intent.FLAG_GRANT_READ_URI_PERMISSION)
+            if (activity!!.packageManager.resolveActivity(intent, 0) != null) {
+                activeContext!!.startActivity(intent)
                 result.success("success")
             } else {
                 result.success("error")
@@ -74,22 +76,22 @@
             val attributionURL: String? = call.argument("attributionURL")
             val appId: String? = call.argument("appId")
 
-            val file =  File(registrar.activeContext().cacheDir,stickerImage)
-            val stickerImageFile = FileProvider.getUriForFile(registrar.activeContext(), registrar.activeContext().applicationContext.packageName + ".com.shekarmudaliyar.social_share", file)
+            val file =  File(activeContext!!.cacheDir,stickerImage)
+            val stickerImageFile = FileProvider.getUriForFile(activeContext!!, activeContext!!.applicationContext.packageName + ".com.shekarmudaliyar.social_share", file)
             val intent = Intent("com.facebook.stories.ADD_TO_STORY")
             intent.type = "image/*"
             intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)
+            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
             intent.putExtra("com.facebook.platform.extra.APPLICATION_ID", appId)
             intent.putExtra("interactive_asset_uri", stickerImageFile)
             intent.putExtra("content_url", attributionURL)
             intent.putExtra("top_background_color", backgroundTopColor)
             intent.putExtra("bottom_background_color", backgroundBottomColor)
-            Log.d("", registrar.activity().toString())
+            Log.d("", activity!!.toString())
             // Instantiate activity and verify it will resolve implicit intent
-            val activity: Activity = registrar.activity()
-            activity.grantUriPermission("com.facebook.katana", stickerImageFile, Intent.FLAG_GRANT_READ_URI_PERMISSION)
-            if (activity.packageManager.resolveActivity(intent, 0) != null) {
-                registrar.activeContext().startActivity(intent)
+            activity!!.grantUriPermission("com.facebook.katana", stickerImageFile, Intent.FLAG_GRANT_READ_URI_PERMISSION)
+            if (activity!!.packageManager.resolveActivity(intent, 0) != null) {
+                activeContext!!.startActivity(intent)
                 result.success("success")
             } else {
                 result.success("error")
@@ -103,8 +105,8 @@
 
             if (image!=null) {
                 //check if  image is also provided
-                val imagefile =  File(registrar.activeContext().cacheDir,image)
-                val imageFileUri = FileProvider.getUriForFile(registrar.activeContext(), registrar.activeContext().applicationContext.packageName + ".com.shekarmudaliyar.social_share", imagefile)
+                val imagefile =  File(activeContext!!.cacheDir,image)
+                val imageFileUri = FileProvider.getUriForFile(activeContext!!, activeContext!!.applicationContext.packageName + ".com.shekarmudaliyar.social_share", imagefile)
                 intent.type = "image/*"
                 intent.putExtra(Intent.EXTRA_STREAM,imageFileUri)
             } else {
@@ -116,16 +118,17 @@
             //create chooser intent to launch intent
             //source: "share" package by flutter (https://github.com/flutter/plugins/blob/master/packages/share/)
             val chooserIntent: Intent = Intent.createChooser(intent, null /* dialog title optional */)
+            chooserIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
 
-            registrar.activeContext().startActivity(chooserIntent)
+            activeContext!!.startActivity(chooserIntent)
             result.success(true)
 
         } else if (call.method == "copyToClipboard") {
             //copies content onto the clipboard
             val content: String? = call.argument("content")
-            val clipboard =registrar.context().getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager
+            val clipboard =context!!.getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager
             val clip = ClipData.newPlainText("", content)
-            clipboard.primaryClip = clip
+            clipboard.setPrimaryClip(clip)
             result.success(true)
         } else if (call.method == "shareWhatsapp") {
             //shares content on WhatsApp
@@ -135,7 +138,7 @@
             whatsappIntent.setPackage("com.whatsapp")
             whatsappIntent.putExtra(Intent.EXTRA_TEXT, content)
             try {
-                registrar.activity().startActivity(whatsappIntent)
+                activity!!.startActivity(whatsappIntent)
                 result.success("true")
             } catch (ex: ActivityNotFoundException) {
                 result.success("false")
@@ -149,7 +152,7 @@
             intent.data = Uri.parse("sms:" )
             intent.putExtra("sms_body", content)
             try {
-                registrar.activity().startActivity(intent)
+                activity!!.startActivity(intent)
                 result.success("true")
             } catch (ex: ActivityNotFoundException) {
                 result.success("false")
@@ -164,7 +167,7 @@
             val intent = Intent(Intent.ACTION_VIEW)
             intent.data = Uri.parse(urlScheme)
             try {
-                registrar.activity().startActivity(intent)
+                activity!!.startActivity(intent)
                 result.success("true")
             } catch (ex: ActivityNotFoundException) {
                 result.success("false")
@@ -178,7 +181,7 @@
             telegramIntent.setPackage("org.telegram.messenger")
             telegramIntent.putExtra(Intent.EXTRA_TEXT, content)
             try {
-                registrar.activity().startActivity(telegramIntent)
+                activity!!.startActivity(telegramIntent)
                 result.success("true")
             } catch (ex: ActivityNotFoundException) {
                 result.success("false")
@@ -189,7 +192,7 @@
             //creating a mutable map of apps
             var apps:MutableMap<String, Boolean> = mutableMapOf()
             //assigning package manager
-            val pm: PackageManager =registrar.context().packageManager
+            val pm: PackageManager =context!!.packageManager
             //get a list of installed apps.
             val packages = pm.getInstalledApplications(PackageManager.GET_META_DATA)
             //intent to check sms app exists
@@ -203,68 +206,32 @@
             apps["instagram"] = packages.any  { it.packageName.toString().contentEquals("com.instagram.android") }
             apps["facebook"] = packages.any  { it.packageName.toString().contentEquals("com.facebook.katana") }
             apps["twitter"] = packages.any  { it.packageName.toString().contentEquals("com.twitter.android") }
-            apps["linkedin"] = packages.any  { it.packageName.toString().contentEquals("com.linkedin.android") }
             apps["whatsapp"] = packages.any  { it.packageName.toString().contentEquals("com.whatsapp") }
             apps["telegram"] = packages.any  { it.packageName.toString().contentEquals("org.telegram.messenger") }
 
             result.success(apps)
-        } else if (call.method == "shareTikTok") {
-            //native share options
-            val content: String? = call.argument("content")
-            val image: String? = call.argument("image")
-            val intent = Intent()
-            intent.action = Intent.ACTION_SEND
-
-            if (image!=null) {
-                //check if  image is also provided
-                val imagefile =  File(registrar.activeContext().cacheDir,image)
-                val imageFileUri = FileProvider.getUriForFile(registrar.activeContext(), registrar.activeContext().applicationContext.packageName + ".com.shekarmudaliyar.social_share", imagefile)
-                intent.type = "image/*"
-                intent.putExtra(Intent.EXTRA_STREAM,imageFileUri)
-                intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)
-            } else {
-                intent.type = "text/plain";
-            }
-            intent.putExtra(Intent.EXTRA_TEXT, content)
-            intent.setPackage("com.ss.android.ugc.trill")
-            val chooserIntent: Intent = Intent.createChooser(intent, null /* dialog title optional */)
-            registrar.activeContext().startActivity(chooserIntent)
-            result.success("true")
-            //create chooser intent to launch intent
-            //source: "share" package by flutter (https://github.com/flutter/plugins/blob/master/packages/share/)
-            //try {
-                //registrar.activity().startActivity(intent)
-               /// result.success("true")
-            //} catch (ex: ActivityNotFoundException) {
-                //result.success("false")
-            //}
-
-        }
-        else if (call.method == "shareLinkedin") {
-            //native share options
-            val content: String? = call.argument("content")
-            val image: String? = call.argument("image")
-            val intent = Intent()
-            intent.action = Intent.ACTION_SEND
-
-            if (image!=null) {
-                //check if  image is also provided
-                val imagefile =  File(registrar.activeContext().cacheDir,image)
-                val imageFileUri = FileProvider.getUriForFile(registrar.activeContext(), registrar.activeContext().applicationContext.packageName + ".com.shekarmudaliyar.social_share", imagefile)
-                intent.type = "image/*"
-                intent.putExtra(Intent.EXTRA_STREAM,imageFileUri)
-                intent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION)
-            } else {
-                intent.type = "text/plain";
-            }
-            intent.putExtra(Intent.EXTRA_TEXT, content)
-            intent.setPackage("com.linkedin.android")
-            val chooserIntent: Intent = Intent.createChooser(intent, null /* dialog title optional */)
-            registrar.activeContext().startActivity(chooserIntent)
-            result.success("true")
-        }
-        else {
+        } else {
             result.notImplemented()
         }
     }
-}
+
+    override fun onDetachedFromEngine(@NonNull binding: FlutterPlugin.FlutterPluginBinding) {
+        channel.setMethodCallHandler(null)
+    }
+
+    override fun onAttachedToActivity(binding: ActivityPluginBinding) {
+        activity = binding.getActivity()
+    }
+
+    override fun onDetachedFromActivityForConfigChanges() {
+        activity = null
+    }
+
+    override fun onReattachedToActivityForConfigChanges(binding: ActivityPluginBinding) {
+        activity = binding.activity
+    }
+
+    override fun onDetachedFromActivity() {
+        activity = null
+    }
+}
\ No newline at end of file
Index: example/pubspec.lock
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Generated by pub\r\n# See https://dart.dev/tools/pub/glossary#lockfile\r\npackages:\r\n  async:\r\n    dependency: transitive\r\n    description:\r\n      name: async\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"2.8.2\"\r\n  boolean_selector:\r\n    dependency: transitive\r\n    description:\r\n      name: boolean_selector\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"2.1.0\"\r\n  characters:\r\n    dependency: transitive\r\n    description:\r\n      name: characters\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"1.2.0\"\r\n  charcode:\r\n    dependency: transitive\r\n    description:\r\n      name: charcode\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"1.3.1\"\r\n  clock:\r\n    dependency: transitive\r\n    description:\r\n      name: clock\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"1.1.0\"\r\n  collection:\r\n    dependency: transitive\r\n    description:\r\n      name: collection\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"1.15.0\"\r\n  cross_file:\r\n    dependency: transitive\r\n    description:\r\n      name: cross_file\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"0.3.1+5\"\r\n  cupertino_icons:\r\n    dependency: \"direct main\"\r\n    description:\r\n      name: cupertino_icons\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"0.1.3\"\r\n  fake_async:\r\n    dependency: transitive\r\n    description:\r\n      name: fake_async\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"1.2.0\"\r\n  ffi:\r\n    dependency: transitive\r\n    description:\r\n      name: ffi\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"1.0.0\"\r\n  file:\r\n    dependency: transitive\r\n    description:\r\n      name: file\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"6.1.0\"\r\n  flutter:\r\n    dependency: \"direct main\"\r\n    description: flutter\r\n    source: sdk\r\n    version: \"0.0.0\"\r\n  flutter_plugin_android_lifecycle:\r\n    dependency: transitive\r\n    description:\r\n      name: flutter_plugin_android_lifecycle\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"2.0.3\"\r\n  flutter_test:\r\n    dependency: \"direct dev\"\r\n    description: flutter\r\n    source: sdk\r\n    version: \"0.0.0\"\r\n  flutter_web_plugins:\r\n    dependency: transitive\r\n    description: flutter\r\n    source: sdk\r\n    version: \"0.0.0\"\r\n  http:\r\n    dependency: \"direct main\"\r\n    description:\r\n      name: http\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"0.13.3\"\r\n  http_parser:\r\n    dependency: transitive\r\n    description:\r\n      name: http_parser\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"4.0.0\"\r\n  image_picker:\r\n    dependency: \"direct main\"\r\n    description:\r\n      name: image_picker\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"0.8.4\"\r\n  image_picker_for_web:\r\n    dependency: transitive\r\n    description:\r\n      name: image_picker_for_web\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"2.1.3\"\r\n  image_picker_platform_interface:\r\n    dependency: transitive\r\n    description:\r\n      name: image_picker_platform_interface\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"2.4.1\"\r\n  js:\r\n    dependency: transitive\r\n    description:\r\n      name: js\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"0.6.3\"\r\n  matcher:\r\n    dependency: transitive\r\n    description:\r\n      name: matcher\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"0.12.11\"\r\n  meta:\r\n    dependency: transitive\r\n    description:\r\n      name: meta\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"1.7.0\"\r\n  path:\r\n    dependency: transitive\r\n    description:\r\n      name: path\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"1.8.0\"\r\n  path_provider:\r\n    dependency: \"direct main\"\r\n    description:\r\n      name: path_provider\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"2.0.8\"\r\n  path_provider_android:\r\n    dependency: transitive\r\n    description:\r\n      name: path_provider_android\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"2.0.9\"\r\n  path_provider_ios:\r\n    dependency: transitive\r\n    description:\r\n      name: path_provider_ios\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"2.0.7\"\r\n  path_provider_linux:\r\n    dependency: transitive\r\n    description:\r\n      name: path_provider_linux\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"2.1.2\"\r\n  path_provider_macos:\r\n    dependency: transitive\r\n    description:\r\n      name: path_provider_macos\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"2.0.0\"\r\n  path_provider_platform_interface:\r\n    dependency: transitive\r\n    description:\r\n      name: path_provider_platform_interface\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"2.0.1\"\r\n  path_provider_windows:\r\n    dependency: transitive\r\n    description:\r\n      name: path_provider_windows\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"2.0.4\"\r\n  pedantic:\r\n    dependency: transitive\r\n    description:\r\n      name: pedantic\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"1.11.1\"\r\n  platform:\r\n    dependency: transitive\r\n    description:\r\n      name: platform\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"3.0.0\"\r\n  plugin_platform_interface:\r\n    dependency: transitive\r\n    description:\r\n      name: plugin_platform_interface\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"2.0.0\"\r\n  process:\r\n    dependency: transitive\r\n    description:\r\n      name: process\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"4.1.0\"\r\n  screenshot:\r\n    dependency: \"direct main\"\r\n    description:\r\n      name: screenshot\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"1.2.3\"\r\n  sky_engine:\r\n    dependency: transitive\r\n    description: flutter\r\n    source: sdk\r\n    version: \"0.0.99\"\r\n  social_share:\r\n    dependency: \"direct dev\"\r\n    description:\r\n      path: \"..\"\r\n      relative: true\r\n    source: path\r\n    version: \"2.2.1\"\r\n  source_span:\r\n    dependency: transitive\r\n    description:\r\n      name: source_span\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"1.8.1\"\r\n  stack_trace:\r\n    dependency: transitive\r\n    description:\r\n      name: stack_trace\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"1.10.0\"\r\n  stream_channel:\r\n    dependency: transitive\r\n    description:\r\n      name: stream_channel\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"2.1.0\"\r\n  string_scanner:\r\n    dependency: transitive\r\n    description:\r\n      name: string_scanner\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"1.1.0\"\r\n  term_glyph:\r\n    dependency: transitive\r\n    description:\r\n      name: term_glyph\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"1.2.0\"\r\n  test_api:\r\n    dependency: transitive\r\n    description:\r\n      name: test_api\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"0.4.3\"\r\n  typed_data:\r\n    dependency: transitive\r\n    description:\r\n      name: typed_data\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"1.3.0\"\r\n  vector_math:\r\n    dependency: transitive\r\n    description:\r\n      name: vector_math\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"2.1.1\"\r\n  win32:\r\n    dependency: transitive\r\n    description:\r\n      name: win32\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"2.0.4\"\r\n  xdg_directories:\r\n    dependency: transitive\r\n    description:\r\n      name: xdg_directories\r\n      url: \"https://pub.dartlang.org\"\r\n    source: hosted\r\n    version: \"0.2.0\"\r\nsdks:\r\n  dart: \">=2.14.0 <3.0.0\"\r\n  flutter: \">=2.5.0\"\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/example/pubspec.lock b/example/pubspec.lock
--- a/example/pubspec.lock	(revision 03e823dd877da6a68b6f21f23a594f3fcd67f694)
+++ b/example/pubspec.lock	(date 1649916884605)
@@ -149,6 +149,13 @@
       url: "https://pub.dartlang.org"
     source: hosted
     version: "0.12.11"
+  material_color_utilities:
+    dependency: transitive
+    description:
+      name: material_color_utilities
+      url: "https://pub.dartlang.org"
+    source: hosted
+    version: "0.1.3"
   meta:
     dependency: transitive
     description:
@@ -300,7 +307,7 @@
       name: test_api
       url: "https://pub.dartlang.org"
     source: hosted
-    version: "0.4.3"
+    version: "0.4.8"
   typed_data:
     dependency: transitive
     description:
